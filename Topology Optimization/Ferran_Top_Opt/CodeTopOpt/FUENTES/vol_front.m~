function [volume,vol_void] = vol_front(dim,phifunct,element,coordinates)

nelem=dim.nelem; nndof=dim.nndof; nnode=dim.nnode;
ndime=dim.ndime; npnod=dim.npnod; nunkn = dim.nunkn; nstre = dim.nstre;

 node(1,:) = element.conectivities(:,1);
  node(2,:) = element.conectivities(:,2);
  node(3,:) = element.conectivities(:,3);

  sign_n(1,:) = sign(phifunct(node(1,:)));
  sign_n(2,:) = sign(phifunct(node(2,:)));
  sign_n(3,:) = sign(phifunct(node(3,:)));
  
  type = sum(sign_n,1);
  index_empty = type == 3;
  index_border = (type == 1 | type == -1);
  %index_more_full_than_full = index_el == -1;
  index_full = type == -3;
  
  vol_void(1,index_empty) = 1;
  
  type_border = type(index_border);
  nodes_border = node(:,index_border);
  phi_border  = phifunct(nodes_border);
  
  pos_porder(1,:,:) = coordinates(nodes_border(1,:),:)';
  pos_porder(2,:,:) = coordinates(nodes_border(2,:),:)';
  pos_porder(3,:,:) = coordinates(nodes_border(3,:),:)';
  
  
  vol_void(1,index_border) = comp_vol_case(phi_border,pos_porder,type_border);
  vol_void(1,index_full) = 0;


  
  
  
 etype = element.type;
[posgp,weigp,ngaus] = cal_posgp_weigp(etype,ndime,nnode,element.ngaus);
evol=zeros(ngaus,nelem);
geometric_volum=zeros(ngaus,nelem);
%vol=zeros(npnod,1);

for igaus=1:ngaus
    [~,djacb] = cal_cartd(igaus,posgp,element,ndime,nnode,nelem,coordinatesn,coordinatesa,ptype);
    evol(igaus,:) = weigp(igaus)*(djacb.*vol_void)';
    geometric_volum(igaus,:) = weigp(igaus)*djacb';
end

volume = sum(sum(evol))/sum(sum(geometric_volum));
  
  

% for inode = 1:nnode
% ephi(inode,:) = phifunct(element.conectivities(:,inode));
% end
% 
% index_el = sum(sign(ephi));


% 2 pos and 1 neg
% 
% for ielem = 1:nelem
%  nodes(:,1) = element.conectivities(ielem,:);
%  pos = coordinates(nodes,:);
%  
%  type = sum(sign(phifunct(nodes)));
%  
%  
%  if type == 3
%      vol_void(:,ielem) = 1;
%  end
%  
%  %more than  50% of void
%  if  type == 1
%      vol_void(:,ielem) = comp_vol_case(phifunct,nodes,pos,type);
%  end
%  
%   if type == -1
%      vol_void(:,ielem) = comp_vol_case(phifunct,nodes,pos,type);
%  end
%  
%  
%  if type == -3
%      vol_void(:,ielem) = 0;
%  end
%  
%     
% end      
  
  
end


% function vol_void = comp_vol_case(phifunct,nodes,pos,type)
% 
%      if sign(phifunct(nodes(1,1)))*sign(phifunct(nodes(2,1))) > 0
%         vol_void = compute_vol_void(phifunct,nodes,pos,type,1,2,3);
%      end
%      
%      if sign(phifunct(nodes(2,1)))*sign(phifunct(nodes(3,1))) > 0
%          vol_void = compute_vol_void(phifunct,nodes,pos,type,2,3,1);
%      end
%      
%      if sign(phifunct(nodes(3,1)))*sign(phifunct(nodes(1,1))) > 0
%          vol_void = compute_vol_void(phifunct,nodes,pos,type,1,3,2);
%      end
%      
% 
% end

function vol_void = comp_vol_case(phifunct,pos,type)

cases = [1 2; 2 3; 3 1];

%vol_void = zeros(size(pos,3));
%vol_t = zeros(size(pos,3));

for icases = 1:size(cases,1)
    index_case = sign(phifunct(cases(icases,1),:)).*sign(phifunct(cases(icases,2),:)) > 0;
    [vol_void_case, vol_t_case] = compute_vol_void(phifunct(:,index_case),pos(:,:,index_case),type(index_case),cases(icases,1),cases(icases,2),setdiff([1:3],cases(icases,:)));
    vol_void(index_case) = vol_void_case;
    vol_t(index_case) = vol_t_case;
end

% caso12 = sign(phifunct(1,:)).*sign(phifunct(2,:)) > 0;
% vol_void(caso12) = compute_vol_void(phifunct(:,caso12),pos(:,:,caso12),type(caso12),1,2,3);
% 
% caso23 = sign(phifunct(2,:)).*sign(phifunct(3,:)) > 0;
% vol_void(caso23) = compute_vol_void(phifunct(:,caso23),pos(:,:,caso23),type(caso23),2,3,1);
% 
% caso13 = sign(phifunct(3,:)).*sign(phifunct(1,:)) > 0;
% vol_void(caso13) = compute_vol_void(phifunct(:,caso13),pos(:,:,caso13),type(caso13),1,3,2);


end



% function [vol_void] = compute_vol_void(phifunct,nodes,pos,type,index_p1,index_p2,index_n)
%          xcort(1,:) = (-phifunct(nodes(index_n,1))*pos(index_p1,:) + phifunct(nodes(index_p1,1))*pos(index_n,:))/(phifunct(nodes(index_p1,1)) - phifunct(nodes(index_n,1)));
%          xcort(2,:) = (-phifunct(nodes(index_n,1))*pos(index_p2,:) + phifunct(nodes(index_p2,1))*pos(index_n,:))/(phifunct(nodes(index_p2,1)) - phifunct(nodes(index_n,1)));
%          
%          vect1 = zeros(3,1);
%          vect2 = zeros(3,1);
%          
%          vect1(1:2,1) = xcort(1,:) - pos(index_n,:);
%          vect2(1:2,1) = xcort(2,:) - pos(index_n,:);
%          vol_hv = 0.5*abs(cross(vect1,vect2));
%          vol_h = vol_hv(3);
%          
%          vectt1 = zeros(3,1);
%          vectt2 = zeros(3,1);
%          vectt1(1:2,1) = pos(index_p1,:) - pos(index_n,:);
%          vectt2(1:2,1) = pos(index_p2,:) - pos(index_n,:);
%          vol_tv =  0.5*abs(cross(vectt1,vectt2));
%          vol_t = vol_tv(3);
%          
%          
%          if type == 1
%             vol_void = (vol_t - vol_h)/vol_t; 
%          end
%          
%          if type == -1
%             vol_void = vol_h/vol_t; 
%          end
%          
%  
% end

function [vol_void,vol_t] = compute_vol_void(phifunct,pos,type,index_p1,index_p2,index_n)
         xcort(1,1,:) = (-phifunct(index_n,:)'.*squeeze(pos(index_p1,1,:)) + phifunct(index_p1,:)'.*squeeze(pos(index_n,1,:)))'./(phifunct(index_p1,:) - phifunct(index_n,:));
         xcort(1,2,:) = (-phifunct(index_n,:)'.*squeeze(pos(index_p1,2,:)) + phifunct(index_p1,:)'.*squeeze(pos(index_n,2,:)))'./(phifunct(index_p1,:) - phifunct(index_n,:));
         
         xcort(2,1,:) = (-phifunct(index_n,:)'.*squeeze(pos(index_p2,1,:)) + phifunct(index_p2,:)'.*squeeze(pos(index_n,1,:)))'./(phifunct(index_p2,:) - phifunct(index_n,:));
         xcort(2,2,:) = (-phifunct(index_n,:)'.*squeeze(pos(index_p2,2,:)) + phifunct(index_p2,:)'.*squeeze(pos(index_n,2,:)))'./(phifunct(index_p2,:) - phifunct(index_n,:));

         vect_1 = zeros(3,size(phifunct,2));
         vect_2 = zeros(3,size(phifunct,2));
         vect_1(1:2,:) = squeeze(xcort(1,:,:) - pos(index_n,:,:));
         vect_2(1:2,:) = squeeze(xcort(2,:,:) - pos(index_n,:,:));
         vol_h = 0.5*abs(vect_1(1,:).*vect_2(2,:)-vect_1(2,:).*vect_2(1,:));

         vectt_1 = zeros(3,size(phifunct,2));
         vectt_2 = zeros(3,size(phifunct,2));
         vectt_1(1:2,:) = pos(index_p1,:,:) - pos(index_n,:,:);
         vectt_2(1:2,:) = pos(index_p2,:,:) - pos(index_n,:,:);
         vol_t = 0.5*abs(vectt_1(1,:).*vectt_2(2,:)-vectt_1(2,:).*vectt_2(1,:));

         
         vol_void = zeros(size(vol_h));
         vol_void(1,type == 1) = (vol_t(type == 1) - vol_h(type == 1))./vol_t(type == 1); 
         vol_void(1,type == -1) = vol_h(type == -1)./vol_t(type == -1); 

         
 
end
